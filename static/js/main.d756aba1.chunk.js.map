{"version":3,"sources":["components/ProgressBar/index.js","components/Option/index.js","components/Button/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["props","className","width","style","index","onClick","changed","value","App","selectHandler","event","target","selectedIndex","substr","length","setState","clickHandler","button","state","payload","bars","progressBar","document","querySelector","classList","add","remove","buttons","limit","progressBars","options","this","map","bar","ProgressBar","key","Option","Button","Title","onChange","axios","get","response","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gYAEe,G,YAAA,SAACA,GACd,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,UAAb,UAA0BD,EAAME,MAAhC,MACA,yBAAKD,UAAS,eAAUD,EAAMC,WAAcE,MAAO,CAAC,MAAQ,GAAR,OAAWH,EAAME,MAAjB,WCJ3C,WAACF,GAEd,OAAO,kBAAC,WAAD,KAAU,4CAAkBA,EAAMI,MAAQ,KCFpC,G,MAAA,SAACJ,GACd,OACE,kBAAC,WAAD,KACE,4BAAQK,QAASL,EAAMM,SAAUN,EAAMO,UCH9B,G,MAAA,WACb,OAAO,oD,iPCoEMC,E,YA/Db,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAWRS,cAAgB,SAAAC,GACd,IAAMH,EAAQG,EAAMC,OAAOJ,MAErBK,EAAgBL,EAAMM,OAAON,EAAMO,OAAS,GAClD,EAAKC,SAAS,CAAEX,MAAOQ,EAAgB,KAhBtB,EAkBnBI,aAAe,SAAAC,GACb,IAAMV,EAAQ,EAAKW,MAAMC,QAAQC,KAAK,EAAKF,MAAMd,OAASa,EACpDE,E,qVAAO,IAAQ,EAAKD,MAAMC,SAChCA,EAAQC,KAAK,EAAKF,MAAMd,OAASG,GAAS,EAAKA,GAAS,IAAMA,EAAQ,IAAO,EAE7E,IAAMc,EAAcC,SAASC,cAAT,wBAAwC,EAAKL,MAAMd,QACnEG,EAAQ,IAAKc,EAAYG,UAAUC,IAAI,OACtCJ,EAAYG,UAAUE,OAAO,OAClC,EAAKX,SAAS,CAAEI,aAxBhB,EAAKD,MAAQ,CACXd,MAAO,EACPe,QAAS,CACPQ,QAAS,GACTP,KAAM,GACNQ,MAAO,OAPM,E,sEA6BT,IAAD,OAEHC,EAAe,KACfC,EAAU,KACVH,EAAU,KAad,OAZII,KAAKb,MAAMC,UACbU,EAAeE,KAAKb,MAAMC,QAAQC,KAAKY,IAAI,SAACC,EAAK7B,GAC/C,OAAO,kBAAC8B,EAAD,CAAajC,UAAS,uBAAkBG,GAAS+B,IAAK/B,EAAOF,MAAO+B,EAAKL,MAAO,EAAKV,MAAMC,QAAQS,UAE5GE,EAAUC,KAAKb,MAAMC,QAAQC,KAAKY,IAAI,SAACC,EAAK7B,GAC1C,OAAO,kBAACgC,EAAD,CAAQD,IAAK/B,EAAOA,MAAOA,MAEpCuB,EAAUI,KAAKb,MAAMC,QAAQQ,QAAQK,IAAI,SAACf,EAAQb,GAAT,OACvC,kBAACiC,EAAD,CAAQF,IAAK/B,EAAOG,MAAOU,EAAQX,QAAS,SAAAI,GAAK,OAAI,EAAKM,aAAaC,SAKzE,yBAAKhB,UAAU,OACb,kBAACqC,EAAD,MACCT,EACD,4BAAQU,SAAUR,KAAKtB,eAAgBqB,GACtCH,K,0KAMkBa,IAAMC,IAAI,qC,OAA3BC,E,OACAC,EAAOD,EAASC,KACtBZ,KAAKhB,SAAS,CAAEI,QAASwB,I,yGA5DXC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d756aba1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.scss\"\r\nexport default (props) =>{\r\n  return (\r\n    <div className=\"container\" >\r\n      <p className=\"length\">{`${props.width}%`}</p>\r\n      <div className={`item ${props.className}`}  style={{\"width\":`${props.width}%`}}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React,{Fragment} from \"react\"\r\n\r\nexport default (props) => {\r\n\r\n  return <Fragment><option>#progress{props.index + 1}</option></Fragment>\r\n}\r\n","import React, { Fragment } from \"react\"\r\nimport \"./style.scss\"\r\nexport default (props) => {\r\n  return (\r\n    <Fragment>\r\n      <button onClick={props.changed}>{props.value}</button>\r\n    </Fragment>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./style.scss\"\r\nexport default () => {\r\n  return <h1>Progress Bars Demo</h1>\r\n}\r\n","import React, { Component } from \"react\"\r\nimport \"./App.scss\"\r\nimport ProgressBar from \"./components/ProgressBar\"\r\nimport Option from \"./components/Option\"\r\nimport Button from \"./components/Button\"\r\nimport Title from \"./components/Title\"\r\nimport axios from \"axios\"\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      index: 0,\r\n      payload: {\r\n        buttons: [],\r\n        bars: [],\r\n        limit: null\r\n      }\r\n    }\r\n  }\r\n\r\n  selectHandler = event => {\r\n    const value = event.target.value\r\n    // get the current index\r\n    const selectedIndex = value.substr(value.length - 1)\r\n    this.setState({ index: selectedIndex - 1 })\r\n  }\r\n  clickHandler = button => {\r\n    const value = this.state.payload.bars[this.state.index] + button\r\n    const payload = { ...this.state.payload }\r\n    payload.bars[this.state.index] = value >= 0 ? (value <= 230 ? value : 230) : 0\r\n\r\n    const progressBar = document.querySelector(`.progress-bar-${this.state.index}`)\r\n    if (value > 100) progressBar.classList.add(\"red\")\r\n    else progressBar.classList.remove(\"red\")\r\n    this.setState({ payload })\r\n  }\r\n\r\n  render() {\r\n  \r\n    let progressBars = null\r\n    let options = null\r\n    let buttons = null\r\n    if (this.state.payload) {\r\n      progressBars = this.state.payload.bars.map((bar, index) => {\r\n        return <ProgressBar className={`progress-bar-${index}`} key={index} width={bar} limit={this.state.payload.limit} />\r\n      })\r\n      options = this.state.payload.bars.map((bar, index) => {\r\n        return <Option key={index} index={index} />\r\n      })\r\n      buttons = this.state.payload.buttons.map((button, index) => (\r\n        <Button key={index} value={button} changed={event => this.clickHandler(button)} />\r\n      ))\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Title />\r\n        {progressBars}\r\n        <select onChange={this.selectHandler}>{options}</select>\r\n        {buttons}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const response = await axios.get(\"https://pb-api.herokuapp.com/bars\")\r\n    const data = response.data\r\n    this.setState({ payload: data })\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}