{"version":3,"sources":["components/ProgressBar/index.js","components/Option/index.js","components/Button/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["props","className","width","style","index","onClick","changed","value","App","selectHandler","event","target","selectedIndex","substr","length","setState","clickHandler","button","state","payload","bars","limit","progressBar","document","querySelector","classList","add","remove","buttons","progressBars","options","this","map","bar","ProgressBar","key","Option","Button","Title","onChange","a","axios","get","response","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXAEe,G,YAAA,SAACA,GACd,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,UAAb,UAA0BD,EAAME,MAAhC,MACA,yBAAKD,UAAS,eAAUD,EAAMC,WAAcE,MAAO,CAAC,MAAQ,GAAR,OAAWH,EAAME,MAAjB,WCJ3C,WAACF,GAEd,OAAO,kBAAC,WAAD,KAAU,4CAAkBA,EAAMI,MAAQ,KCFpC,G,MAAA,SAACJ,GACd,OACE,kBAAC,WAAD,KACE,4BAAQK,QAASL,EAAMM,SAAUN,EAAMO,UCH9B,G,MAAA,WACb,OAAO,oD,iBCuEMC,E,kDAlEb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAWRS,cAAgB,SAACC,GACf,IAAMH,EAAQG,EAAMC,OAAOJ,MAErBK,EAAgBL,EAAMM,OAAON,EAAMO,OAAS,GAClD,EAAKC,SAAS,CAAEX,MAAOQ,EAAgB,KAhBtB,EAkBnBI,aAAe,SAACC,GACd,IAAMV,EAAQ,EAAKW,MAAMC,QAAQC,KAAK,EAAKF,MAAMd,OAASa,EACpDE,EAAO,eAAQ,EAAKD,MAAMC,SAChCA,EAAQC,KAAK,EAAKF,MAAMd,OAASG,GAAS,EAAKA,GAASY,EAAQE,MAAQd,EAAQY,EAAQE,MAAS,EAEjG,IAAMC,EAAcC,SAASC,cAAT,wBAAwC,EAAKN,MAAMd,QACnEG,EAAQ,IAAKe,EAAYG,UAAUC,IAAI,OACtCJ,EAAYG,UAAUE,OAAO,OAClC,EAAKZ,SAAS,CAAEI,aAxBhB,EAAKD,MAAQ,CACXd,MAAO,EACPe,QAAS,CACPS,QAAS,GACTR,KAAM,GACNC,MAAO,IAPM,E,0CA6BnB,WAAU,IAAD,OACHQ,EAAe,KACfC,EAAU,KACVF,EAAU,KAed,OAdIG,KAAKb,MAAMC,UACbU,EAAeE,KAAKb,MAAMC,QAAQC,KAAKY,KAAI,SAACC,EAAK7B,GAC/C,OACE,kBAAC8B,EAAD,CAAajC,UAAS,uBAAkBG,GAAS+B,IAAK/B,EAAOF,MAAO+B,EAAKZ,MAAO,EAAKH,MAAMC,QAAQE,WAGvGS,EAAUC,KAAKb,MAAMC,QAAQC,KAAKY,KAAI,SAACC,EAAK7B,GAC1C,OAAO,kBAACgC,EAAD,CAAQD,IAAK/B,EAAOA,MAAOA,OAEpCwB,EAAUG,KAAKb,MAAMC,QAAQS,QAAQI,KAAI,SAACf,EAAQb,GAAT,OACvC,kBAACiC,EAAD,CAAQF,IAAK/B,EAAOG,MAAOU,EAAQX,QAAS,SAACI,GAAD,OAAW,EAAKM,aAAaC,UAK3E,yBAAKhB,UAAU,OACb,6BACE,kBAACqC,EAAD,MACCT,EACD,4BAAQU,SAAUR,KAAKtB,eAAgBqB,GACtCF,M,sEAMT,8BAAAY,EAAA,sEACyBC,IAAMC,IAAI,qCADnC,OACQC,EADR,OAEQC,EAAOD,EAASC,KACtBb,KAAKhB,SAAS,CAAEI,QAASyB,IAH3B,gD,2DA5DgBC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2c6934c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.scss\"\r\nexport default (props) =>{\r\n  return (\r\n    <div className=\"container\" >\r\n      <p className=\"length\">{`${props.width}%`}</p>\r\n      <div className={`item ${props.className}`}  style={{\"width\":`${props.width}%`}}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React,{Fragment} from \"react\"\r\n\r\nexport default (props) => {\r\n\r\n  return <Fragment><option>#progress{props.index + 1}</option></Fragment>\r\n}\r\n","import React, { Fragment } from \"react\"\r\nimport \"./style.scss\"\r\nexport default (props) => {\r\n  return (\r\n    <Fragment>\r\n      <button onClick={props.changed}>{props.value}</button>\r\n    </Fragment>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./style.scss\"\r\nexport default () => {\r\n  return <h1>Progress Bars Demo</h1>\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport ProgressBar from \"./components/ProgressBar\";\r\nimport Option from \"./components/Option\";\r\nimport Button from \"./components/Button\";\r\nimport Title from \"./components/Title\";\r\nimport axios from \"axios\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      index: 0,\r\n      payload: {\r\n        buttons: [],\r\n        bars: [],\r\n        limit: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  selectHandler = (event) => {\r\n    const value = event.target.value;\r\n    // get the current index\r\n    const selectedIndex = value.substr(value.length - 1);\r\n    this.setState({ index: selectedIndex - 1 });\r\n  };\r\n  clickHandler = (button) => {\r\n    const value = this.state.payload.bars[this.state.index] + button;\r\n    const payload = { ...this.state.payload };\r\n    payload.bars[this.state.index] = value >= 0 ? (value <= payload.limit ? value : payload.limit) : 0;\r\n\r\n    const progressBar = document.querySelector(`.progress-bar-${this.state.index}`);\r\n    if (value > 100) progressBar.classList.add(\"red\");\r\n    else progressBar.classList.remove(\"red\");\r\n    this.setState({ payload });\r\n  };\r\n\r\n  render() {\r\n    let progressBars = null;\r\n    let options = null;\r\n    let buttons = null;\r\n    if (this.state.payload) {\r\n      progressBars = this.state.payload.bars.map((bar, index) => {\r\n        return (\r\n          <ProgressBar className={`progress-bar-${index}`} key={index} width={bar} limit={this.state.payload.limit} />\r\n        );\r\n      });\r\n      options = this.state.payload.bars.map((bar, index) => {\r\n        return <Option key={index} index={index} />;\r\n      });\r\n      buttons = this.state.payload.buttons.map((button, index) => (\r\n        <Button key={index} value={button} changed={(event) => this.clickHandler(button)} />\r\n      ));\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <Title />\r\n          {progressBars}\r\n          <select onChange={this.selectHandler}>{options}</select>\r\n          {buttons}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const response = await axios.get(\"https://pb-api.herokuapp.com/bars\");\r\n    const data = response.data;\r\n    this.setState({ payload: data });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}